return {
    "ibhagwan/fzf-lua",
    -- optional for icon support
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config       = function()
        -- calling `setup` is optional for customization
        require("fzf-lua").setup({})
    end,
    keys         = {
        -- files
        { "<leader>fc", "<cmd>lua require('fzf-lua').files({ cwd = '~/.config' })<cr>",     desc = "Find Config File" },
        { "<leader>ff", "<cmd>lua require('fzf-lua').files({ cwd = Root()      })<cr>",     desc = "Find Files (Root Dir)" },
        { "<C-p>",      "<cmd>lua require('fzf-lua').files({ cwd = Root()      })<cr>",     desc = "Find Files (Root Dir)" },
        { "<leader>fF", "<cmd>FzfLua files<cr>",                                            desc = "Find Files (cwd)" },
        { "<leader>fr", "<cmd>FzfLua oldfiles<cr>",                                         desc = "Recent" },
        { "<leader>fR", "<cmd>lua require('fzf-lua').oldfiles({ cwd = vim.uv.cwd() })<cr>", desc = "Recent (Root Dir)" },
        { "<leader>fq", "<cmd>FzfLua quickfix<cr>",                                         desc = "Quickfix List" },
        { "<leader>fq", "<cmd>FzfLua quickfix_stack<cr>",                                   desc = "Quickfix Stack" },
        { "<leader>fl", "<cmd>FzfLua loclist<cr>",                                          desc = "Location List" },
        { "<leader>fL", "<cmd>FzfLua loclist_stack<cr>",                                    desc = "Location Stack" },
        { "<leader>ft", "<cmd>FzfLua tabs<cr>",                                             desc = "Tabs" },
        -- buffers
        { "<leader>bb", "<cmd>FzfLua buffers <cr>",                                         desc = "Buffers" },
        { "<leader>bl", "<cmd>FzfLua lines<cr>",                                            desc = "Lines (buffer)" },
        { "<leader>bL", "<cmd>FzfLua blines<cr>",                                           desc = "Lines (project)" },
        -- git
        { "<leader>gb", "<cmd>FzfLua git_branches<CR>",                                     desc = "Git Branches" },
        { "<leader>gc", "<cmd>FzfLua git_bcommits<CR>",                                     desc = "Git Commit log (buffer)" },
        { "<leader>gC", "<cmd>FzfLua git_commits<CR>",                                      desc = "Git Commit log (project)" },
        { "<leader>gf", "<cmd>FzfLua git_files<CR>",                                        desc = "Git Files" },
        { "<leader>gh", "<cmd>FzfLua git_stash<CR>",                                        desc = "Git Stas[h]" },
        { "<leader>gs", "<cmd>FzfLua git_status<CR>",                                       desc = "Git Status" },
        { "<leader>gt", "<cmd>FzfLua git_tags<CR>",                                         desc = "Git Tags" },
        -- search
        { "<leader>s",  "<cmd>FzfLua grep_visual<cr>",                                      desc = "search visual",                   mode = "v" },
        { '<leader>s"', "<cmd>FzfLua registers<cr>",                                        desc = "Registers" },
        { "<leader>s:", "<cmd>FzfLua command_history<cr>",                                  desc = "Command History" },
        { "<leader>s/", "<cmd>FzfLua search_history<cr>",                                   desc = "Search History" },
        { "<leader>sa", "<cmd>FzfLua autocommands<cr>",                                     desc = "Auto Commands" },
        { "<leader>sb", "<cmd>FzfLua buffers<cr>",                                          desc = "Buffer" },
        { "<leader>sb", "<cmd>FzfLua changes<cr>",                                          desc = "Changes" },
        { "<leader>sg", "<cmd>lua require('fzf-lua').live_grep({ cwd = Root() })<cr>",      desc = "Grep (Root Dir)" },
        { "<leader>sG", "<cmd>FzfLua live_grep",                                            desc = "Grep (cwd)" },
        { "<leader>sc", "<cmd>FzfLua commands<cr>",                                         desc = "Commands" },
        { "<leader>sd", "<cmd>FzfLua diagnostic_document<cr>",                              desc = "Diagnostics (document)" },
        { "<leader>sD", "<cmd>FzfLua diagnostic_workspace<cr>",                             desc = "Diagnostics (Workspace)" },
        { "<leader>sh", "<cmd>FzfLua helptags<cr>",                                         desc = "Help Pages" },
        { "<leader>sH", "<cmd>FzfLua highlights<cr>",                                       desc = "highLight Groups" },
        { "<leader>sk", "<cmd>FzfLua keymaps<cr>",                                          desc = "Key Maps" },
        { "<leader>sm", "<cmd>FzfLua marks<cr>",                                            desc = "Jump to Mark" },
        { "<leader>sp", "<cmd>FzfLua manpages<cr>",                                         desc = "Man Pages" },
        { "<leader>sr", "<cmd>FzfLua resume<cr>",                                           desc = "Resume" },
        { "<leader>sw", "<cmd>FzfLua grep_cword<cr>",                                       desc = "word under cursor" },
        { "<leader>sW", "<cmd>FzfLua grep_cWORD<cr>",                                       desc = "WORD under cursor" },
        -- LSP
        { "<leader>la", "<cmd>FzfLua lsp_code_actions<cr>",                                 desc = "Code Actions" },
        { "<leader>ld", "<cmd>FzfLua lsp_definitions<cr>",                                  desc = "Definitions" },
        { "<leader>lD", "<cmd>FzfLua lsp_declarations<cr>",                                 desc = "Declarations" },
        { "<leader>lf", "<cmd>FzfLua lsp_finder<cr>",                                       desc = "All LSP locations, combined view" },
        { "<leader>li", "<cmd>FzfLua lsp_incoming_calls<cr>",                               desc = "Incoming Calls" },
        { "<leader>lI", "<cmd>FzfLua lsp_implementations<cr>",                              desc = "Implementations" },
        { "<leader>lo", "<cmd>FzfLua lsp_outgoing_calls<cr>",                               desc = "Outgoing Calls" },
        { "<leader>lr", "<cmd>FzfLua lsp_references<cr>",                                   desc = "References" },
        { "<leader>ls", "<cmd>FzfLua lsp_document_symbols<cr>",                             desc = "Symbols (Document)" },
        { "<leader>lS", "<cmd>FzfLua lsp_workspace_symbols<cr>",                            desc = "Symbols (Workspace)" },
        { "<leader>ly", "<cmd>FzfLua lsp_typedefs<cr>",                                     desc = "T[y]pe Definitions" },
        --- UI
        { "<leader>uc", "<cmd>FzfLua colorscheme<cr>",                                      desc = "Colorscheme" },
        { "<leader>uC", "<cmd>FzfLua awesome_colorscheme<cr>",                              desc = "Awesome Colorscheme" },
        --- tags
        { "<leader>t",  "<cmd>FzfLua tags_grep_visual",                                     desc = "tags_grep visual selection",      mode = "v" },
        { "<leader>tt", "<cmd>FzfLua btags",                                                desc = "search buffer tags" },
        { "<leader>tT", "<cmd>FzfLua tags",                                                 desc = "search project tags" },
        { "<leader>tt", "<cmd>FzfLua tags_live_grep",                                       desc = "live grep project tags" },
        { "<leader>tt", "<cmd>FzfLua tags_grep",                                            desc = "grep project tags" },
        { "<leader>tw", "<cmd>FzfLua tags_grep_cword",                                      desc = "tags grep word under cursor" },
        { "<leader>tW", "<cmd>FzfLua tags_grep_cWORD",                                      desc = "tags grep WORD under cursor" },
        -- { "<leader>sW", Telescope("grep_string", { cwd = false }),                     mode = "v",                       desc = "Selection (cwd)" },
        -- { "<leader>sW", Telescope("grep_string", { cwd = false, word_match = "-w" }),  desc = "Word (cwd)" },
        -- { "<leader>sn", "<cmd>Noice telescope<cr>",                                    desc = "Noice" },
        -- { "<leader>sN", "<cmd>Telescope notify<cr>",                                   desc = "Notify" },
        -- { "<leader>so", "<cmd>Telescope vim_options<cr>",                              desc = "Options" },
        -- { "<leader>sw", Telescope("grep_string"),                                      mode = "v",                       desc = "Selection (Root Dir)" },
        -- { "<leader>sw", Telescope("grep_string", { word_match = "-w" }),               desc = "Word (Root Dir)" },
    },
}
